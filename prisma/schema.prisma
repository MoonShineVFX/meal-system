generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum TransactionType {
  RECHARGE
  PAYMENT
  ORDER
  REFUND
}

enum Role {
  SERVER
  ADMIN
  STAFF
  USER
}

model AuthToken {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model User {
  id                String        @id
  name              String
  role              Role          @default(USER)
  createdAt         DateTime      @default(now())
  points            Int           @default(500)
  credits           Int           @default(0)
  sourceTransaction Transaction[] @relation("source")
  targetTransaction Transaction[] @relation("target")
  authTokens        AuthToken[]
  orders            Order[]
}

model Transaction {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  sourceUser    User            @relation("source", fields: [sourceUserId], references: [id])
  sourceUserId  String
  targetUser    User            @relation("target", fields: [targetUserId], references: [id])
  targetUserId  String
  type          TransactionType
  pointsAmount  Int             @default(0)
  creditsAmount Int             @default(0)
  orders        Order[]
  twmp          Twmp?

  @@index([sourceUserId, targetUserId, type, createdAt(sort: Desc)])
}

model Setting {
  id               Int      @id @default(autoincrement())
  lastRechargeDate DateTime @default(now())
  rechargeValue    Int      @default(500)
}

// TWMP
enum TwmpPayStatus {
  SUCCESS
  FAILED
  PENDING
}

model Twmp {
  id            String        @id @default(cuid()) // orderNo
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  transAMT      Int
  txnID         String?       @unique
  txnUID        String[]
  txnDate       DateTime?     @db.Date
  txnTime       DateTime?     @db.Time
  payStatus     TwmpPayStatus @default(PENDING)
  paymentTool   String
  transaction   Transaction?  @relation(fields: [transactionId], references: [id])
  transactionId Int?          @unique
}

// Meal
model Order {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isCancelled   Boolean     @default(false)
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  meal          Meal        @relation(fields: [mealId], references: [id])
  mealId        Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
}

model Meal {
  id                 Int      @id @default(autoincrement())
  name               String
  description        String   @default("")
  price              Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  menu               Menu?    @relation(fields: [menuId], references: [id])
  menuId             Int?     @unique
  orders             Order[]
  ordersLimitPerUser Int      @default(0)
  ordersLimitTotal   Int      @default(0)
}

model Menu {
  id                 Int      @id @default(autoincrement())
  name               String
  description        String   @default("")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  publishedDate      DateTime
  closedDate         DateTime
  ordersLimitPerUser Int      @default(1)
  ordersLimitTotal   Int      @default(0)
  breakfastMenu      DayMenu? @relation("breakfast")
  lunchMenu          DayMenu? @relation("lunch")
  dinnerMenu         DayMenu? @relation("dinner")
  teaMenu            DayMenu? @relation("tea")
  meals              Meal[]
}

model DayMenu {
  id          DateTime @id @db.Date
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  breakfast   Menu?    @relation("breakfast", fields: [breakfastId], references: [id])
  breakfastId Int?     @unique
  lunch       Menu?    @relation("lunch", fields: [lunchId], references: [id])
  lunchId     Int?     @unique
  dinner      Menu?    @relation("dinner", fields: [dinnerId], references: [id])
  dinnerId    Int?     @unique
  tea         Menu?    @relation("tea", fields: [teaId], references: [id])
  teaId       Int?     @unique
}
