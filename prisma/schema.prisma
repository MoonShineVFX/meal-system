generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions"]
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// User
enum UserRole {
  ADMIN
  STAFF
  USER
}

model UserToken {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model User {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  role          UserRole @default(USER)
  pointBalance  Int      @default(500)
  creditBalance Int      @default(0)

  cartItems          CartItem[]
  tokens             UserToken[]
  orders             Order[]
  twmpDeposits       TwmpDeposit[]
  ethWallet          EthWallet?
  sourceTransactions Transaction[] @relation("source")
  targetTransactions Transaction[] @relation("target")
}

// Transaction
enum TransactionType {
  RECHARGE // Server modify balance
  REFUND
  PAYMENT // User pay/order for something
  TRANSFER // User transfer balance to another user
}

model Transaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  type         TransactionType
  pointAmount  Int             @default(0)
  creditAmount Int             @default(0)

  sourceUser   User        @relation("source", fields: [sourceUserId], references: [id])
  sourceUserId String
  targetUser   User        @relation("target", fields: [targetUserId], references: [id])
  targetUserId String
  order        Order?      @relation(fields: [orderId], references: [id])
  orderId      Int?
  twmpResult   TwmpResult? @relation(fields: [twmpResultId], references: [txnUID])
  twmpResultId String?
  ethHashes    String[]
}

// TWMP
enum TwmpResultStatus {
  SUCCESS
  FAILED
  CANCELED
}

model TwmpResult {
  txnUID    String   @id
  createdAt DateTime
  updatedAt DateTime @updatedAt

  status TwmpResultStatus

  transactions Transaction[]
  deposit      TwmpDeposit   @relation(fields: [depositId], references: [orderNo])
  depositId    String
}

model TwmpDeposit {
  orderNo   String   @id @default(cuid())
  createdAt DateTime @default(now())

  transAMT    Int
  txnID       String? @unique
  callbackUrl String?
  qrcode      String?

  results TwmpResult[]
  user    User         @relation(fields: [userId], references: [id])
  userId  String
}

// Blockchain
model EthWallet {
  address String @id

  privateKey String? @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

// Order
enum OrderStatus {
  SUCCESS
  CANCELED
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status OrderStatus @default(SUCCESS)

  user         User          @relation(fields: [userId], references: [id])
  userId       String
  items        OrderItem[]
  transactions Transaction[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  price    Int
  quantity Int

  order       Order             @relation(fields: [orderId], references: [id])
  orderId     Int
  commodity   CommodityOnMenu   @relation(fields: [commodityId], references: [id])
  commodityId Int
  options     CommodityOption[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quantity Int

  user        User              @relation(fields: [userId], references: [id])
  userId      String
  commodity   CommodityOnMenu   @relation(fields: [commodityId], references: [id])
  commodityId Int
  options     CommodityOption[]
}

// Commodity
model CommodityCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  isArchived Boolean @default(false)

  commodities Commodity[]
}

model CommodityOptionSetTemplate {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  data Json @db.Json // { "name": string, "description": string, "type": string, "options": string[] }

  isArchived Boolean @default(false)
}

enum CommodityOptionSetType {
  SINGLE
  MULTI
}

model CommodityOption {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  name       String
  isArchived Boolean @default(false)

  set        CommodityOptionSet @relation(fields: [setId], references: [id])
  setId      Int
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model CommodityOptionSet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String                 @default("")
  type        CommodityOptionSetType

  options     CommodityOption[]
  commodity   Commodity         @relation(fields: [commodityId], references: [id])
  commodityId Int
}

model Commodity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String  @default("")
  price       Int
  image       String?

  optionSets CommodityOptionSet[]
  category   CommodityCategory?   @relation(fields: [categoryId], references: [id])
  categoryId Int?
  toMenu     CommodityOnMenu[]
}

// Menu
model CommodityOnMenu {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  overridePrice Int?
  limitPerUser  Int     @default(0)
  SKU           Int     @default(0)
  isArchived    Boolean @default(false)

  commodity   Commodity   @relation(fields: [commodityId], references: [id])
  commodityId Int
  menu        Menu?       @relation(fields: [menuId], references: [id])
  menuId      Int?        @unique
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

enum MenuType {
  BREAKFAST
  LUNCH
  DINNER
  TEA
  MAIN
}

model Menu {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  date          DateTime @db.Date
  type          MenuType
  name          String
  description   String   @default("")
  publishedDate DateTime
  closedDate    DateTime
  limitPerUser  Int      @default(0)
  isArchived    Boolean  @default(false)

  commodities CommodityOnMenu[]
}
