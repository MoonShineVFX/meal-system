generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount", "extendedWhereUnique"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

// User
enum UserRole {
  ADMIN
  STAFF
  USER
}

enum UserAuthority {
  CLIENT_ORDER
}

model UserToken {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  lastUsedAt          DateTime?
  // web push notification
  notificationEnabled Boolean   @default(false)
  badgeEnabled        Boolean   @default(false)
  endpoint            String?   @unique
  p256dh              String?   @unique
  auth                String?   @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model UserSettings {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  // qrcodeAutoCheckout Boolean @default(false)
  // notificationSound  Boolean @default(true)
}

model User {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                  String
  role                  UserRole        @default(USER)
  pointBalance          Int             @default(0)
  creditBalance         Int             @default(0)
  authorities           UserAuthority[] @default([])
  password              String?
  lastPointRechargeTime DateTime?
  lastBonusCheckTime    DateTime?
  email                 String?

  settings           UserSettings?
  profileImage       Image?        @relation(fields: [profileImageId], references: [id])
  profileImageId     String?       @unique
  cartItems          CartItem[]
  tokens             UserToken[]
  orders             Order[]
  Deposit            Deposit[]
  sourceTransactions Transaction[] @relation("source")
  targetTransactions Transaction[] @relation("target")
  bonus              Bonus[]       @relation("bonusUsers")
  bonusRedeem        Bonus[]       @relation("bonusRedeem")
}

// Transaction
enum TransactionType {
  RECHARGE // Server modify balance
  PAYMENT // User pay/order for something
  CANCELED // Staff cancel order
  TRANSFER // User transfer balance to another user
  REFUND // User ask for refund (not implemented)
  DEPOSIT // User deposit from 3rd party
}

model Transaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  type         TransactionType
  pointAmount  Int             @default(0)
  creditAmount Int             @default(0)

  sourceUser   User   @relation("source", fields: [sourceUserId], references: [id])
  sourceUserId String
  targetUser   User   @relation("target", fields: [targetUserId], references: [id])
  targetUserId String

  deposit          Deposit? @relation(fields: [depositId], references: [id])
  depositId        String?
  ordersForPayment Order[]  @relation("orderPayment")
  orderForCanceled Order?   @relation("canceledPayment")
  bonus            Bonus?   @relation(fields: [bonusId], references: [id])
  bonusId          Int?

  @@index([sourceUserId, targetUserId, type, createdAt(sort: Desc)])
}

// Deposit
enum DepositStatus {
  PENDING
  SUCCESS
  FAILED // include cancel
  REFUND
}

model Deposit {
  id        String   @id
  createdAt DateTime @default(now())

  amount      Int
  status      DepositStatus @default(PENDING)
  paymentType String?
  payTime     DateTime?

  user         User          @relation(fields: [userId], references: [id])
  userId       String
  transactions Transaction[]
}

// Bonus
model Bonus {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  note      String?
  validAt   DateTime?
  amount    Int
  isDeleted Boolean   @default(false)

  users        User[]        @relation("bonusUsers")
  redeemUsers  User[]        @relation("bonusRedeem")
  transactions Transaction[]

  @@index([id, createdAt])
}

// Order
model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  timePreparing DateTime?
  timeDishedUp  DateTime?
  timeCompleted DateTime?
  timeCanceled  DateTime?
  forClient     Boolean   @default(false)
  note          String?

  user   User        @relation(fields: [userId], references: [id])
  userId String
  menu   Menu        @relation(fields: [menuId], references: [id])
  menuId Int
  items  OrderItem[]

  paymentTransaction    Transaction? @relation("orderPayment", fields: [paymentTransactionId], references: [id])
  paymentTransactionId  Int?
  canceledTransaction   Transaction? @relation("canceledPayment", fields: [canceledTransactionId], references: [id])
  canceledTransactionId Int?         @unique

  @@index([userId, menuId, timePreparing(sort: Desc), createdAt(sort: Desc)])
  @@index([menuId, timeCompleted, timeCanceled, createdAt(sort: Desc)])
  @@index([forClient, createdAt(sort: Desc)])
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  name     String
  price    Int
  quantity Int
  options  Json   @db.Json // { "optionName": string | string[]}

  order           Order           @relation(fields: [orderId], references: [id])
  orderId         Int
  commodityOnMenu CommodityOnMenu @relation(fields: [menuId, commodityId], references: [menuId, commodityId])
  menuId          Int
  commodityId     Int
  image           Image?          @relation(fields: [imageId], references: [id])
  imageId         String?

  @@index([orderId, menuId, commodityId])
}

model CartItem {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quantity   Int
  options    Json    @db.Json // { "optionName": string | string[]}
  optionsKey String
  invalid    Boolean @default(false)

  user            User            @relation(fields: [userId], references: [id])
  userId          String
  commodityOnMenu CommodityOnMenu @relation(fields: [menuId, commodityId], references: [menuId, commodityId], onDelete: Cascade)
  menuId          Int
  commodityId     Int

  @@id([userId, menuId, commodityId, optionsKey])
  @@index([userId, menuId, commodityId, invalid])
}

// Commodity
model CommodityRootCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String @unique
  order Int    @default(99)

  childCategories CommodityCategory[]
}

model CommodityCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  order    Int    @default(99)
  subOrder Int    @default(99)

  rootCategory   CommodityRootCategory @relation(fields: [rootCategoryId], references: [id], onDelete: Cascade)
  rootCategoryId Int
  commodities    Commodity[]

  @@unique([rootCategoryId, name])
}

model CommodityOptionSetsTemplate {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String @unique
  order      Int    @default(99)
  optionSets Json   @db.Json // { "name": string, "multiSelect": boolean, "options": string[], "order": number }[]
}

model Commodity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String @default("")
  price       Int

  optionSets Json    @db.Json // { "name": string, "multiSelect": boolean, "options": string[], "order": number }[]
  isDeleted  Boolean @default(false)

  categories CommodityCategory[]
  image      Image?              @relation(fields: [imageId], references: [id], onDelete: SetNull)
  imageId    String?
  onMenus    CommodityOnMenu[]
  supplier   Supplier?           @relation(fields: [supplierId], references: [id])
  supplierId Int?

  @@index([id, isDeleted])
}

// Menu
model CommodityOnMenu {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  limitPerUser Int     @default(0)
  stock        Int     @default(0)
  isDeleted    Boolean @default(false)

  commodity   Commodity   @relation(fields: [commodityId], references: [id])
  commodityId Int
  menu        Menu        @relation(fields: [menuId], references: [id], onDelete: Cascade)
  menuId      Int
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@id([menuId, commodityId])
  @@index([menuId, commodityId, isDeleted])
}

enum MenuType {
  BREAKFAST
  LUNCH
  DINNER
  TEA
  LIVE
  RETAIL
}

model Menu {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  date          DateTime?
  type          MenuType
  name          String    @default("")
  description   String    @default("")
  publishedDate DateTime?
  closedDate    DateTime?
  limitPerUser  Int       @default(0)
  isDeleted     Boolean   @default(false)

  commodities CommodityOnMenu[]
  orders      Order[]
  supplier    Supplier?         @relation(fields: [supplierId], references: [id])
  supplierId  Int?

  @@index([date, type, isDeleted, createdAt(sort: Desc)])
  @@index([id, isDeleted, createdAt(sort: Desc)])
}

model Supplier {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String  @default("")
  isDeleted   Boolean @default(false)

  commodities Commodity[]
  menus       Menu[]

  @@index([id, isDeleted])
}

// Resource
model Image {
  id        String   @id @default(cuid()) // SHA256 hash
  createdAt DateTime @default(now())

  path   String
  width  Int?
  height Int?

  Commodity Commodity[]
  OrderItem OrderItem[]
  User      User?
}
